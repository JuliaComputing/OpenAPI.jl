var documenterSearchIndex = {"docs":
[{"location":"todo/#TODO","page":"TODO","title":"TODO","text":"","category":"section"},{"location":"todo/","page":"TODO","title":"TODO","text":"Not all OpenAPI features are supported yet, e.g.:","category":"page"},{"location":"todo/","page":"TODO","title":"TODO","text":"not\ninheritance and polymorphism\nsome of the JSON schema keywords\nsome subtler data types\nnative representaion of some of the string formats, e.g. uuid, url\nread-only and write-only properties\nbetter enum support\nauthentication schemes\ndeepObjects in query parameters","category":"page"},{"location":"todo/","page":"TODO","title":"TODO","text":"There could be more unsupported features than what is listed above.","category":"page"},{"location":"userguide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"userguide/#Code-Generation","page":"User Guide","title":"Code Generation","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Use instructions provided for the Julia OpenAPI code generator plugin to generate Julia code.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Requires version 6.3.0 or later of openapi-generator.","category":"page"},{"location":"userguide/#Models","page":"User Guide","title":"Models","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Each model from the specification is generated into a file named model_<modelname>.jl. It is represented as a mutable struct that is a subtype of the abstract type APIModel. Models have the following methods defined:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"constructor that takes keyword arguments to fill in values for all model properties.\npropertynames\nhasproperty\ngetproperty\nsetproperty!","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"In addition to these standard Julia methods, these convenience methods are also generated that help in checking value at a hierarchical path of the model.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"function haspropertyat(o::T, path...) where {T<:APIModel}\nfunction getpropertyat(o::T, path...) where {T<:APIModel}","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"E.g:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"# access o.field.subfield1.subfield2\nif haspropertyat(o, \"field\", \"subfield1\", \"subfield2\")\n    getpropertyat(o, \"field\", \"subfield1\", \"subfield2\")\nend\n\n# access nested array elements, e.g. o.field2.subfield1[10].subfield2\nif haspropertyat(o, \"field\", \"subfield1\", 10, \"subfield2\")\n    getpropertyat(o, \"field\", \"subfield1\", 10, \"subfield2\")\nend","category":"page"},{"location":"userguide/#Validations","page":"User Guide","title":"Validations","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Following validations are incorporated into models:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"maximum value: must be a numeric value less than or equal to a specified value\nminimum value: must be a numeric value greater than or equal to a specified value\nmaximum length: must be a string value of length less than or equal to a specified value\nminimum length: must be a string value of length greater than or equal to a specified value\nmaximum item count: must be a list value with number of items less than or equal to a specified value\nminimum item count: must be a list value with number of items greater than or equal to a specified value\nunique items: items must be unique\nmaximum properties count: number of properties must be less than or equal to a specified value\nminimum properties count: number of properties must be greater than or equal to a specified value\npattern: must match the specified regex pattern\nformat: must match the specified format specifier (see subsection below for details)\nenum: value must be from a list of allowed values\nmultiple of: must be a multiple of a specified value","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Validations are imposed in the constructor and setproperty! methods of models.","category":"page"},{"location":"userguide/#Validations-for-format-specifiers","page":"User Guide","title":"Validations for format specifiers","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"String, number and integer data types can have an optional format modifier that serves as a hint at the contents and format of the string. Validations for the following OpenAPI defined formats are built in:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Data Type Format Description\nnumber float Floating-point numbers.\nnumber double Floating-point numbers with double precision.\ninteger int32 Signed 32-bit integers (commonly used integer type).\ninteger int64 Signed 64-bit integers (long type).\nstring date full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21\nstring date-time the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z\nstring byte base64-encoded characters, for example, U3dhZ2dlciByb2Nrcw==","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Validations for custom formats can be plugged in by overloading the OpenAPI.val_format method.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"E.g.:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"# add a new validation named `custom` for the number type\nfunction OpenAPI.val_format(val::AbstractFloat, ::Val{:custom})\n    return true # do some validations and return result\nend\n# add a new validation named `custom` for the integer type\nfunction OpenAPI.val_format(val::Integer, ::Val{:custom})\n    return true # do some validations and return result\nend\n# add a new validation named `custom` for the string type\nfunction OpenAPI.val_format(val::AbstractString, ::Val{:custom})\n    return true # do some validations and return result\nend","category":"page"},{"location":"userguide/#Client-APIs","page":"User Guide","title":"Client APIs","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Each client API set is generated into a file named api_<apiname>.jl. It is represented as a struct and the APIs under it are generated as methods. An API set can be constructed by providing the OpenAPI client instance that it can use for communication.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The required API parameters are generated as regular function arguments. Optional parameters are generated as keyword arguments. Method documentation is generated with description, parameter information and return value. Two variants of the API are generated. The first variant is suitable for calling synchronously. It returns a tuple of the result struct and the HTTP response.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"# example synchronous API that returns an Order instance\ngetOrderById(api::StoreApi, orderId::Int64) -> (result, http_response)","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The second variant is suitable for asynchronous calls to methods that return chunked transfer encoded responses, where in the API streams the response objects into an output channel.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"# example asynchronous API that streams matching Pet instances into response_stream\nfindPetsByStatus(\n    api::PetApi,\n    response_stream::Channel,\n    status::Vector{String}) -> (response_stream, http_response)","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The HTTP response returned from the API calls, have these properties:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"status: integer status code\nmessage: http message corresponding to status code\nheaders: http response headers as Vector{Pair{String,String}}","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"A client context holds common information to be used across APIs. It also holds a connection to the server and uses that across API calls. The client context needs to be passed as the first parameter of all API calls. It can be created as:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Client(root::String;\n    headers::Dict{String,String}=Dict{String,String}(),\n    get_return_type::Function=(default,data)->default,\n    timeout::Int=DEFAULT_TIMEOUT_SECS,\n    long_polling_timeout::Int=DEFAULT_LONGPOLL_TIMEOUT_SECS,\n    pre_request_hook::Function,\n    verbose::Union{Bool,Function}=false,\n)","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Where:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"root: the root URI where APIs are hosted (should not end with a /)\nheaders: any additional headers that need to be passed along with all API calls\nget_return_type: optional method that can map a Julia type to a return type other than what is specified in the API specification by looking at the data (this is used only in special cases, for example when models are allowed to be dynamically loaded)\ntimeout: optional timeout to apply for server methods (default OpenAPI.Clients.DEFAULT_TIMEOUT_SECS)\nlong_polling_timeout: optional timeout to apply for long polling methods (default OpenAPI.Clients.DEFAULT_LONGPOLL_TIMEOUT_SECS)\npre_request_hook: user provided hook to modify the request before it is sent\nverbose: whether to enable verbose logging","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The pre_request_hook must provide the following two implementations:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"pre_request_hook(ctx::OpenAPI.Clients.Ctx) -> ctx\npre_request_hook(resource_path::AbstractString, body::Any, headers::Dict{String,String}) -> (resource_path, body, headers)","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The verbose option can be one of:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"false: the default, no verbose logging\ntrue: enables curl verbose logging to stderr\na function that accepts two arguments - type and message (available on Julia version >= 1.7)\na default implementation of this that uses @info to log the arguments is provided as OpenAPI.Clients.default_debug_hook","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"In case of any errors an instance of ApiException is thrown. It has the following fields:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"status::Int: HTTP status code\nreason::String: Optional human readable string\nresp::Downloads.Response: The HTTP Response for this call\nerror::Union{Nothing,Downloads.RequestError}: The HTTP error on request failure","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"An API call involves the following steps:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"If a pre request hook is provided, it is invoked with an instance of OpenAPI.Clients.Ctx that has the request attributes. The hook method is expected to make any modifications it needs to the request attributes before the request is prepared, and return the modified context.\nThe URL to be invoked is prepared by replacing placeholders in the API URL template with the supplied function parameters.\nIf this is a POST request, serialize the instance of APIModel provided as the body parameter as a JSON document.\nIf a pre request hook is provided, it is invoked with the prepared resource path, body and request headers. The hook method is expected to modify and return back a tuple of resource path, body and headers which will be used to make the request.\nMake the HTTP call to the API endpoint and collect the response.\nDetermine the response type / model, invoke the optional user specified mapping function if one was provided.\nConvert (deserialize) the response data into the return type and return.\nIn case of any errors, throw an instance of ApiException","category":"page"},{"location":"userguide/#Server-APIs","page":"User Guide","title":"Server APIs","text":"","category":"section"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The server code is generated as a package. It contains API stubs and validations of API inputs. It requires the caller to have implemented the APIs, the signatures of which are provided in the generated package module docstring.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"A register function is made available that when provided with a Router instance, registers handlers for all the APIs.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"register(router, impl; path_prefix=\"\", optional_middlewares...) -> HTTP.Router","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Paramerets:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"router: HTTP.Router to register handlers in, the same instance is also returned\nimpl: module that implements the server APIs","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Optional parameters:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"path_prefix: prefix to be applied to all paths\noptional_middlewares: Register one or more optional middlewares to be applied to all requests.","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"Optional middlewares can be one or more of:","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"init: called before the request is processed\npre_validation: called after the request is parsed but before validation\npre_invoke: called after validation but before the handler is invoked\npost_invoke: called after the handler is invoked but before the response is sent","category":"page"},{"location":"userguide/","page":"User Guide","title":"User Guide","text":"The order in which middlewares are invoked is: init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]\nDepth = 3","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = OpenAPI","category":"page"},{"location":"reference/#API-Reference","page":"Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Client","page":"Reference","title":"Client","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Clients.Client\nClients.set_user_agent\nClients.set_cookie\nClients.set_header\nClients.set_timeout","category":"page"},{"location":"reference/#OpenAPI.Clients.Client","page":"Reference","title":"OpenAPI.Clients.Client","text":"Client(root::String;\n    headers::Dict{String,String}=Dict{String,String}(),\n    get_return_type::Function=get_api_return_type,\n    long_polling_timeout::Int=DEFAULT_LONGPOLL_TIMEOUT_SECS,\n    timeout::Int=DEFAULT_TIMEOUT_SECS,\n    pre_request_hook::Function=noop_pre_request_hook,\n    escape_path_params::Union{Nothing,Bool}=nothing,\n    verbose::Union{Bool,Function}=false,\n)\n\nCreate a new OpenAPI client context.\n\nA client context holds common information to be used across APIs. It also holds a connection to the server and uses that across API calls. The client context needs to be passed as the first parameter of all API calls.\n\nParameters:\n\nroot: The root URL of the server. This is the base URL that will be used for all API calls.\n\nKeyword parameters:\n\nheaders: A dictionary of HTTP headers to be sent with all API calls.\nget_return_type: A function that is called to determine the return type of an API call. This function is called with the following parameters:\nreturn_types: A dictionary of regular expressions and their corresponding return types. The regular expressions are matched against the HTTP status code of the response.\nresponse_code: The HTTP status code of the response.\nresponse_data: The response data as a string.\nThe function should return the return type to be used for the API call.\nlong_polling_timeout: The timeout in seconds for long polling requests. This is the time after which the request will be aborted if no data is received from the server.\ntimeout: The timeout in seconds for all other requests. This is the time after which the request will be aborted if no data is received from the server.\npre_request_hook: A function that is called before every API call. This function must provide two methods:\npre_request_hook(ctx::Ctx): This method is called before every API call. It is passed the context object that will be used for the API call. The function should return the context object to be used for the API call.\npre_request_hook(resource_path::AbstractString, body::Any, headers::Dict{String,String}): This method is called before every API call. It is passed the resource path, request body and request headers that will be used for the API call. The function should return those after making any modifications to them.\nescape_path_params: Whether the path parameters should be escaped before being used in the URL. This is useful if the path parameters contain characters that are not allowed in URLs or contain path separators themselves.\nchunk_reader_type: The type of chunk reader to be used for streaming responses. This can be one of LineChunkReader, JSONChunkReader or RFC7464ChunkReader. If not specified, then the type is automatically determined based on the return type of the API call.\nverbose: Can be set either to a boolean or a function.\nIf set to true, then the client will log all HTTP requests and responses.\nIf set to a function, then that function will be called with the following parameters:\ntype: The type of message.\nmessage: The message to be logged.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenAPI.Clients.set_user_agent","page":"Reference","title":"OpenAPI.Clients.set_user_agent","text":"set_user_agent(client::Client, ua::String)\n\nSet the User-Agent header to be sent with all API calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.Clients.set_cookie","page":"Reference","title":"OpenAPI.Clients.set_cookie","text":"set_cookie(client::Client, ck::String)\n\nSet the Cookie header to be sent with all API calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.Clients.set_header","page":"Reference","title":"OpenAPI.Clients.set_header","text":"set_header(client::Client, name::String, value::String)\n\nSet the specified header to be sent with all API calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.Clients.set_timeout","page":"Reference","title":"OpenAPI.Clients.set_timeout","text":"set_timeout(client::Client, timeout::Int)\n\nSet the timeout in seconds for all API calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Examining-Models","page":"Reference","title":"Examining Models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"hasproperty\ngetproperty\nsetproperty!\nClients.getpropertyat\nClients.haspropertyat","category":"page"},{"location":"reference/#Base.hasproperty","page":"Reference","title":"Base.hasproperty","text":"hasproperty(x, s::Symbol)\n\nReturn a boolean indicating whether the object x has s as one of its own properties.\n\ncompat: Julia 1.2\nThis function requires at least Julia 1.2.\n\nSee also: propertynames, hasfield.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.getproperty","page":"Reference","title":"Base.getproperty","text":"getproperty(value, name::Symbol)\ngetproperty(value, name::Symbol, order::Symbol)\n\nThe syntax a.b calls getproperty(a, :b). The syntax @atomic order a.b calls getproperty(a, :b, :order) and the syntax @atomic a.b calls getproperty(a, :b, :sequentially_consistent).\n\nExamples\n\njulia> struct MyType\n           x\n       end\n\njulia> function Base.getproperty(obj::MyType, sym::Symbol)\n           if sym === :special\n               return obj.x + 1\n           else # fallback to getfield\n               return getfield(obj, sym)\n           end\n       end\n\njulia> obj = MyType(1);\n\njulia> obj.special\n2\n\njulia> obj.x\n1\n\nSee also getfield, propertynames and setproperty!.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.setproperty!","page":"Reference","title":"Base.setproperty!","text":"setproperty!(value, name::Symbol, x)\nsetproperty!(value, name::Symbol, x, order::Symbol)\n\nThe syntax a.b = c calls setproperty!(a, :b, c). The syntax @atomic order a.b = c calls setproperty!(a, :b, c, :order) and the syntax @atomic a.b = c calls setproperty!(a, :b, c, :sequentially_consistent).\n\ncompat: Julia 1.8\nsetproperty! on modules requires at least Julia 1.8.\n\nSee also setfield!, propertynames and getproperty.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.Clients.getpropertyat","page":"Reference","title":"OpenAPI.Clients.getpropertyat","text":"getpropertyat(o::T, path...) where {T<:APIModel}\n\nReturns the property at the specified path. The path can be a single property name or a chain of property names separated by dots, representing a nested property.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.Clients.haspropertyat","page":"Reference","title":"OpenAPI.Clients.haspropertyat","text":"haspropertyat(o::T, path...) where {T<:APIModel}\n\nReturns true if the supplied object has the property at the specified path.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Examining-Client-API-Response","page":"Reference","title":"Examining Client API Response","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Clients.ApiResponse","category":"page"},{"location":"reference/#OpenAPI.Clients.ApiResponse","page":"Reference","title":"OpenAPI.Clients.ApiResponse","text":"ApiResponse\n\nRepresents the HTTP API response from the server. This is returned as the second return value from all API calls.\n\nProperties available:\n\nstatus: the HTTP status code\nmessage: the HTTP status message\nheaders: the HTTP headers\nraw: the raw response ( as a Downloads.Response object)\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"Clients.is_longpoll_timeout","category":"page"},{"location":"reference/#OpenAPI.Clients.is_longpoll_timeout","page":"Reference","title":"OpenAPI.Clients.is_longpoll_timeout","text":"is_longpoll_timeout(ex::Exception)\n\nExamine the supplied exception and return true if the reason is timeout of a long polling request. If the exception is a nested exception of type CompositeException or TaskFailedException, then navigates through the nested exception values to examine the leaves.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"Reference","title":"Reference","text":"Clients.is_request_interrupted","category":"page"},{"location":"reference/#OpenAPI.Clients.is_request_interrupted","page":"Reference","title":"OpenAPI.Clients.is_request_interrupted","text":"is_request_interrupted(ex::Exception)\n\nExamine the supplied exception and return true if the reason is that the request was interrupted. If the exception is a nested exception of type CompositeException or TaskFailedException, then navigates through the nested exception values to examine the leaves.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"Reference","title":"Reference","text":"Clients.storefile","category":"page"},{"location":"reference/#OpenAPI.Clients.storefile","page":"Reference","title":"OpenAPI.Clients.storefile","text":"storefile(api_call::Function;\n    folder::AbstractString = pwd(),\n    rename_file::String=\"\",\n    )::Tuple{Any,ApiResponse,String}\n\nHelper method that stores the result of an API call that returns file\ncontents (as binary or text string) into a file.\n\nConvenient to use it in a do block. Returns the path where file is stored additionally.\n\nE.g.:\n```\n_result, _http_response, file = OpenAPI.Clients.storefile() do\n    # Invoke the OpenaPI method that returns file contents.\n    # This is the method that returns a tuple of (result, http_response).\n    # The result is the file contents as binary or text string.\n    fetch_file(api, \"reports\", \"category1\")\nend\n```\n\nParameters:\n\n- `api_call`: The OpenAPI function call that returns file contents (as binary or text string). See example in method description.\n- `folder`: Location to store file, defaults to `pwd()`.\n- `filename`: Use this filename, overrides any filename that may be there in the `Content-Disposition` header.\n\nReturns: (result, http_response, file_path)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Server","page":"Reference","title":"Server","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"The server code is generated as a package. It contains API stubs and validations of API inputs. It requires the caller to have implemented the APIs, the signatures of which are provided in the generated package module docstring.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Refer to the User Guide section for mode details of the API that is generated.","category":"page"},{"location":"reference/#Tools","page":"Reference","title":"Tools","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"swagger_ui\nstop_swagger_ui\nswagger_editor\nstop_swagger_editor\nlint","category":"page"},{"location":"reference/#OpenAPI.swagger_ui","page":"Reference","title":"OpenAPI.swagger_ui","text":"swagger_ui(spec; port=8080, use_sudo=false)\nswagger_ui(spec_dir, spec_file; port=8080, use_sudo=false)\n\nStart a Swagger UI container for the given OpenAPI spec file. Returns the URL of the Swagger UI.\n\nOptional arguments:\n\nport: The port to use for the Swagger UI. Defaults to 8080.\nuse_sudo: Whether to use sudo to run Docker commands. Defaults to false.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.stop_swagger_ui","page":"Reference","title":"OpenAPI.stop_swagger_ui","text":"stop_swagger_ui(; use_sudo=false)\n\nStop and remove the Swagger UI container, if it is running. Returns true if the container was stopped and removed, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.swagger_editor","page":"Reference","title":"OpenAPI.swagger_editor","text":"swagger_editor(; port=8080, use_sudo=false)\nswagger_editor(spec; port=8080, use_sudo=false)\nswagger_editor(spec_dir, spec_file; port=8080, use_sudo=false)\n\nStart a Swagger Editor container with an optional OpenAPI spec file. Returns the URL of the Swagger Editor.\n\nOptional arguments:\n\nport: The port to use for the Swagger Editor. Defaults to 8080.\nuse_sudo: Whether to use sudo to run Docker commands. Defaults to false.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.stop_swagger_editor","page":"Reference","title":"OpenAPI.stop_swagger_editor","text":"stop_swagger_editor(; use_sudo=false)\n\nStop and remove the Swagger Editor container, if it is running. Returns true if the container was stopped and removed, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenAPI.lint","page":"Reference","title":"OpenAPI.lint","text":"lint(spec; use_sudo=false)\nlint(spec_dir, spec_file; use_sudo=false)\n\nLint an OpenAPI spec file using Spectral.\n\nOptional arguments:\n\nuse_sudo: Whether to use sudo to run Docker commands. Defaults to false.\n\n\n\n\n\n","category":"function"},{"location":"#OpenAPI.jl","page":"Home","title":"OpenAPI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the Julia library needed along with code generated by the OpenAPI generator to help define, produce and consume OpenAPI interfaces.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The goal of OpenAPI is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out OpenAPI-Spec for additional information about the OpenAPI project, including additional libraries with support for other languages and more.","category":"page"},{"location":"#Migrating-from-Swagger.jl","page":"Home","title":"Migrating from Swagger.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package supersedes the Swagger.jl package. OpenAPI.jl and the associated generator can address both OpenAPI 2.x (Swagger) and OpenAPI 3.x specifications. Code dependent on Swagger.jl would not directly work with OpenAPI.jl, but migration should not be too difficult.","category":"page"},{"location":"tools/#Tools","page":"Tools","title":"Tools","text":"","category":"section"},{"location":"tools/#Swagger-UI","page":"Tools","title":"Swagger UI","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Swagger UI allows visualization and interaction with the API’s resources without having any of the implementation logic in place. OpenAPI.jl includes convenience methods to launch Swagger UI from Julia.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Use OpenAPI.swagger_ui to open Swagger UI. It uses the standard swaggerapi/swagger-ui docker image and requires docker engine to be installed.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"# specify a specification file to start with\nOpenAPI.swagger_ui(\n    spec::AbstractString;   # the OpenAPI specification to use\n    port::Int=8080,         # port to use \n    use_sudo::Bool=false    # whether to use sudo while invoking docker\n)\n\n# specify a folder and specification file name to start with\nOpenAPI.swagger_ui(\n    spec_dir::AbstractString;   # folder containing the specification file\n    spec_file::AbstractString;  # the specification file\n    port::Int=8080,             # port to use \n    use_sudo::Bool=false        # whether to use sudo while invoking docker\n)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"It returns the URL that should be opened in a browser to access the Swagger UI. Combining it with a tool like DefaultApplication.jl can help open a browser tab directly from Julia.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"DefaultApplication.open(OpenAPI.swagger_ui(\"/my/openapi/spec.json\"))","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"To stop the Swagger UI container, use OpenAPI.stop_swagger_ui.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"OpenAPI.stop_swagger_ui(;\n    use_sudo::Bool=false    # whether to use sudo while invoking docker\n)","category":"page"},{"location":"tools/#Swagger-Editor","page":"Tools","title":"Swagger Editor","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Swagger Editor allows editing of OpenAPI specifications and simultaneous visualization and interaction with the API’s resources without having any of the client implementation logic in place. OpenAPI.jl includes convenience methods to launch Swagger Editor from Julia.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Use OpenAPI.swagger_editor to open Swagger Editor. It uses the standard swaggerapi/swagger-editor docker image and requires docker engine to be installed.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"# specify a specification file to start with\nOpenAPI.swagger_editor(\n    spec::AbstractString;   # the OpenAPI specification to use\n    port::Int=8080,         # port to use \n    use_sudo::Bool=false    # whether to use sudo while invoking docker\n)\n\n# specify a folder and specification file name to start with\nOpenAPI.swagger_editor(\n    spec_dir::AbstractString;   # folder containing the specification file\n    spec_file::AbstractString;  # the specification file\n    port::Int=8080,             # port to use \n    use_sudo::Bool=false        # whether to use sudo while invoking docker\n)\n\n# start without specifying any initial specification file\nOpenAPI.swagger_editor(\n    port::Int=8080,             # port to use \n    use_sudo::Bool=false        # whether to use sudo while invoking docker\n)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"It returns the URL that should be opened in a browser to access the Swagger UI. Combining it with a tool like DefaultApplication.jl can help open a browser tab directly from Julia.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"DefaultApplication.open(OpenAPI.swagger_editor(\"/my/openapi/spec.json\"))","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"To stop the Swagger Editor container, use OpenAPI.stop_swagger_editor.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"OpenAPI.stop_swagger_editor(;\n    use_sudo::Bool=false    # whether to use sudo while invoking docker\n)","category":"page"},{"location":"tools/#Spectral-Linter","page":"Tools","title":"Spectral Linter","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Spectral is an open-source API style guide enforcer and linter. OpenAPI.jl includes a convenience method to use the  Spectral OpenAPI linter from Julia.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"# specify a specification file to start with\nOpenAPI.lint(\n    spec::AbstractString;   # the OpenAPI specification to use\n    use_sudo::Bool=false    # whether to use sudo while invoking docker\n)\n\n# specify a folder and specification file name to start with\nOpenAPI.lint(\n    spec_dir::AbstractString;   # folder containing the specification file\n    spec_file::AbstractString;  # the specification file\n    use_sudo::Bool=false        # whether to use sudo while invoking docker\n)","category":"page"}]
}
