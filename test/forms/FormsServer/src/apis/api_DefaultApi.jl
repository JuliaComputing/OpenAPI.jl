# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function post_urlencoded_form_read(handler)
    function post_urlencoded_form_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["form_id"] = OpenAPI.Servers.to_param(Int64, path_params, "form_id", required=true, )
        ismultipart = false
        form_data = ismultipart ? HTTP.parse_multipart_form(req) : HTTP.queryparams(String(copy(req.body)))
        openapi_params["additionalMetadata"] = OpenAPI.Servers.to_param(String, form_data, "additionalMetadata"; multipart=ismultipart, isfile=false, )
        openapi_params["file"] = OpenAPI.Servers.to_param(String, form_data, "file"; multipart=ismultipart, isfile=false, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function post_urlencoded_form_validate(handler)
    function post_urlencoded_form_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function post_urlencoded_form_invoke(impl; post_invoke=nothing)
    function post_urlencoded_form_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.post_urlencoded_form(req::HTTP.Request, openapi_params["form_id"]; additional_metadata=get(openapi_params, "additionalMetadata", nothing), file=get(openapi_params, "file", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function upload_binary_file_read(handler)
    function upload_binary_file_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["file_id"] = OpenAPI.Servers.to_param(Int64, path_params, "file_id", required=true, )
        ismultipart = true
        form_data = ismultipart ? HTTP.parse_multipart_form(req) : HTTP.queryparams(String(copy(req.body)))
        openapi_params["additionalMetadata"] = OpenAPI.Servers.to_param(String, form_data, "additionalMetadata"; multipart=ismultipart, isfile=false, )
        openapi_params["file"] = OpenAPI.Servers.to_param(Vector{UInt8}, form_data, "file"; multipart=ismultipart, isfile=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function upload_binary_file_validate(handler)
    function upload_binary_file_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function upload_binary_file_invoke(impl; post_invoke=nothing)
    function upload_binary_file_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.upload_binary_file(req::HTTP.Request, openapi_params["file_id"]; additional_metadata=get(openapi_params, "additionalMetadata", nothing), file=get(openapi_params, "file", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function upload_text_file_read(handler)
    function upload_text_file_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["file_id"] = OpenAPI.Servers.to_param(Int64, path_params, "file_id", required=true, )
        ismultipart = true
        form_data = ismultipart ? HTTP.parse_multipart_form(req) : HTTP.queryparams(String(copy(req.body)))
        openapi_params["additionalMetadata"] = OpenAPI.Servers.to_param(String, form_data, "additionalMetadata"; multipart=ismultipart, isfile=false, )
        openapi_params["file"] = OpenAPI.Servers.to_param(String, form_data, "file"; multipart=ismultipart, isfile=false, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function upload_text_file_validate(handler)
    function upload_text_file_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function upload_text_file_invoke(impl; post_invoke=nothing)
    function upload_text_file_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.upload_text_file(req::HTTP.Request, openapi_params["file_id"]; additional_metadata=get(openapi_params, "additionalMetadata", nothing), file=get(openapi_params, "file", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/test/{form_id}/post_urlencoded_form_data", OpenAPI.Servers.middleware(impl, post_urlencoded_form_read, post_urlencoded_form_validate, post_urlencoded_form_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/test/{file_id}/upload_binary_file", OpenAPI.Servers.middleware(impl, upload_binary_file_read, upload_binary_file_validate, upload_binary_file_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/test/{file_id}/upload_text_file", OpenAPI.Servers.middleware(impl, upload_text_file_read, upload_text_file_validate, upload_text_file_invoke; optional_middlewares...))
    return router
end
