{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "/v3"
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "paths": {
        "/user/logout": {
            "get": {
                "summary": "Logs out current logged in user session",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "logoutUser",
                "tags": [
                    "user"
                ],
                "description": "",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/store/order/{orderId}": {
            "delete": {
                "summary": "Delete purchase order by ID",
                "parameters": [
                    {
                        "name": "orderId",
                        "required": true,
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Order not found"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                },
                "operationId": "deleteOrder",
                "tags": [
                    "store"
                ],
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors"
            },
            "get": {
                "summary": "Find purchase order by ID",
                "parameters": [
                    {
                        "name": "orderId",
                        "required": true,
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "schema": {
                            "minimum": 1,
                            "format": "int64",
                            "type": "integer",
                            "maximum": 5
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Order not found"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "getOrderById",
                "tags": [
                    "store"
                ],
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions"
            }
        },
        "/user/{username}": {
            "delete": {
                "summary": "Delete user",
                "parameters": [
                    {
                        "name": "username",
                        "required": true,
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    }
                },
                "operationId": "deleteUser",
                "tags": [
                    "user"
                ],
                "description": "This can only be done by the logged in user.",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "summary": "Updated user",
                "parameters": [
                    {
                        "name": "username",
                        "required": true,
                        "in": "path",
                        "description": "name that need to be deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true,
                    "description": "Updated user object"
                },
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid user supplied"
                    }
                },
                "operationId": "updateUser",
                "tags": [
                    "user"
                ],
                "description": "This can only be done by the logged in user.",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "get": {
                "summary": "Get user by user name",
                "parameters": [
                    {
                        "name": "username",
                        "required": true,
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "getUserByName",
                "tags": [
                    "user"
                ],
                "description": ""
            }
        },
        "/user/login": {
            "get": {
                "summary": "Logs user into the system",
                "parameters": [
                    {
                        "name": "username",
                        "required": true,
                        "in": "query",
                        "description": "The user name for login",
                        "schema": {
                            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "required": true,
                        "in": "query",
                        "description": "The password for login in clear text",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username/password supplied"
                    },
                    "200": {
                        "headers": {
                            "Set-Cookie": {
                                "description": "Cookie authentication key for use with the `api_key` apiKey authentication.",
                                "schema": {
                                    "example": "AUTH_KEY=abcde12345; Path=/; HttpOnly",
                                    "type": "string"
                                }
                            },
                            "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "schema": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            },
                            "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "schema": {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "loginUser",
                "tags": [
                    "user"
                ],
                "description": ""
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "summary": "uploads an image",
                "parameters": [
                    {
                        "name": "petId",
                        "required": true,
                        "in": "path",
                        "description": "ID of pet to update",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "format": "binary",
                                        "description": "file to upload",
                                        "type": "string"
                                    },
                                    "additionalMetadata": {
                                        "description": "Additional data to pass to server",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "uploadFile",
                "tags": [
                    "pet"
                ],
                "description": "",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/store/inventory": {
            "get": {
                "summary": "Returns pet inventories by status",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "getInventory",
                "tags": [
                    "store"
                ],
                "description": "Returns a map of status codes to quantities",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/pet": {
            "put": {
                "summary": "Update an existing pet",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
                },
                "externalDocs": {
                    "url": "http://petstore.swagger.io/v2/doc/updatePet",
                    "description": "API documentation for the updatePet operation"
                },
                "operationId": "updatePet",
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "tags": [
                    "pet"
                ],
                "description": "",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Add a new pet to the store",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
                },
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "addPet",
                "tags": [
                    "pet"
                ],
                "description": "",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/user": {
            "post": {
                "summary": "Create user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true,
                    "description": "Created user object"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUser",
                "tags": [
                    "user"
                ],
                "description": "This can only be done by the logged in user.",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/user/createWithArray": {
            "post": {
                "summary": "Creates list of users with given input array",
                "requestBody": {
                    "$ref": "#/components/requestBodies/UserArray"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUsersWithArrayInput",
                "tags": [
                    "user"
                ],
                "description": "",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "summary": "Finds Pets by status",
                "parameters": [
                    {
                        "schema": {
                            "items": {
                                "default": "available",
                                "type": "string",
                                "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                ]
                            },
                            "type": "array"
                        },
                        "name": "status",
                        "required": true,
                        "style": "form",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "explode": false,
                        "deprecated": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid status value"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "findPetsByStatus",
                "tags": [
                    "pet"
                ],
                "description": "Multiple status values can be provided with comma separated strings",
                "security": [
                    {
                        "petstore_auth": [
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/user/createWithList": {
            "post": {
                "summary": "Creates list of users with given input array",
                "requestBody": {
                    "$ref": "#/components/requestBodies/UserArray"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUsersWithListInput",
                "tags": [
                    "user"
                ],
                "description": "",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/pet/{petId}": {
            "delete": {
                "summary": "Deletes a pet",
                "parameters": [
                    {
                        "name": "api_key",
                        "required": false,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "petId",
                        "required": true,
                        "in": "path",
                        "description": "Pet id to delete",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "operationId": "deletePet",
                "tags": [
                    "pet"
                ],
                "description": "",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Updates a pet in the store with form data",
                "parameters": [
                    {
                        "name": "petId",
                        "required": true,
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the pet",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Updated status of the pet",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "operationId": "updatePetWithForm",
                "tags": [
                    "pet"
                ],
                "description": "",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "get": {
                "summary": "Find pet by ID",
                "parameters": [
                    {
                        "name": "petId",
                        "required": true,
                        "in": "path",
                        "description": "ID of pet to return",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Pet not found"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "getPetById",
                "tags": [
                    "pet"
                ],
                "description": "Returns a single pet",
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "summary": "Finds Pets by tags",
                "parameters": [
                    {
                        "name": "tags",
                        "required": true,
                        "style": "form",
                        "in": "query",
                        "description": "Tags to filter by",
                        "explode": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid tag value"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    },
                                    "type": "array"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "findPetsByTags",
                "tags": [
                    "pet"
                ],
                "deprecated": true,
                "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "security": [
                    {
                        "petstore_auth": [
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "summary": "Place an order for a pet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    },
                    "required": true,
                    "description": "order placed for purchasing the pet"
                },
                "responses": {
                    "400": {
                        "description": "Invalid Order"
                    },
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        },
                        "description": "successful operation"
                    }
                },
                "operationId": "placeOrder",
                "tags": [
                    "store"
                ],
                "description": ""
            }
        }
    },
    "tags": [
        {
            "name": "pet",
            "description": "Everything about your Pets"
        },
        {
            "name": "store",
            "description": "Access to Petstore orders"
        },
        {
            "name": "user",
            "description": "Operations about user"
        }
    ],
    "info": {
        "title": "OpenAPI Petstore",
        "license": {
            "name": "Apache-2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "description": "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.",
        "version": "1.0.0"
    },
    "components": {
        "securitySchemes": {
            "petstore_auth": {
                "flows": {
                    "implicit": {
                        "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                        "scopes": {
                            "read:pets": "read your pets",
                            "write:pets": "modify pets in your account"
                        }
                    }
                },
                "type": "oauth2"
            },
            "api_key": {
                "name": "api_key",
                "in": "header",
                "type": "apiKey"
            }
        },
        "requestBodies": {
            "UserArray": {
                "content": {
                    "application/json": {
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/User"
                            },
                            "type": "array"
                        }
                    }
                },
                "required": true,
                "description": "List of user object"
            },
            "Pet": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                },
                "required": true,
                "description": "Pet object that needs to be added to the store"
            }
        },
        "schemas": {
            "User": {
                "xml": {
                    "name": "User"
                },
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "userStatus": {
                        "format": "int32",
                        "type": "integer",
                        "description": "User Status"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "title": "a User",
                "description": "A User who is purchasing from the pet store",
                "type": "object"
            },
            "Order": {
                "xml": {
                    "name": "Order"
                },
                "properties": {
                    "petId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "shipDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                            "placed",
                            "approved",
                            "delivered"
                        ]
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "complete": {
                        "default": false,
                        "type": "boolean"
                    },
                    "quantity": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "title": "Pet Order",
                "description": "An order for a pets from the pet store",
                "type": "object"
            },
            "Pet": {
                "xml": {
                    "name": "Pet"
                },
                "required": [
                    "name",
                    "photoUrls"
                ],
                "properties": {
                    "name": {
                        "example": "doggie",
                        "type": "string"
                    },
                    "status": {
                        "deprecated": true,
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "photoUrls": {
                        "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                        },
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "xml": {
                            "name": "tag",
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "type": "array"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    }
                },
                "title": "a Pet",
                "description": "A pet for sale in the pet store",
                "type": "object"
            },
            "Category": {
                "xml": {
                    "name": "Category"
                },
                "properties": {
                    "name": {
                        "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$",
                        "type": "string"
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "title": "Pet category",
                "description": "A category for a pet",
                "type": "object"
            },
            "Tag": {
                "xml": {
                    "name": "Tag"
                },
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "title": "Pet Tag",
                "description": "A tag for a pet",
                "type": "object"
            },
            "ApiResponse": {
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "title": "An uploaded response",
                "description": "Describes the result of uploading an image resource",
                "type": "object"
            }
        }
    }
}
