# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function find_pets_by_status_read(handler)
    function find_pets_by_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["status"] = OpenAPI.Servers.to_param(FindPetsByStatusStatusParameter, query_params, "status", required=true, style="deepObject", is_explode=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function find_pets_by_status_validate(handler)
    function find_pets_by_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function find_pets_by_status_invoke(impl; post_invoke=nothing)
    function find_pets_by_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.find_pets_by_status(req::HTTP.Request, openapi_params["status"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerPetApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/pet/findByStatus", OpenAPI.Servers.middleware(impl, find_pets_by_status_read, find_pets_by_status_validate, find_pets_by_status_invoke; optional_middlewares...))
    return router
end
