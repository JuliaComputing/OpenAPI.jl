# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function delayresponse_get_read(handler)
    function delayresponse_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["delay_seconds"] = OpenAPI.Servers.to_param(Int64, query_params, "delay_seconds", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delayresponse_get_validate(handler)
    function delayresponse_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("delay_seconds", "delayresponse_get", :minimum, openapi_params["delay_seconds"], 0, false)
        
        return handler(req)
    end
end

function delayresponse_get_invoke(impl; post_invoke=nothing)
    function delayresponse_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delayresponse_get(req::HTTP.Request, openapi_params["delay_seconds"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/delayresponse", OpenAPI.Servers.middleware(impl, delayresponse_get_read, delayresponse_get_validate, delayresponse_get_invoke; optional_middlewares...))
    return router
end
