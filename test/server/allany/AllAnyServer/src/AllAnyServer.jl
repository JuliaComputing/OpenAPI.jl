# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
Encapsulates generated server code for AllAnyServer

The following server methods must be implemented:

- **echo_anyof_base_type_post**
    - *invocation:* POST /echo_anyof_base_type
    - *signature:* echo_anyof_base_type_post(req::HTTP.Request, any_of_base_type::AnyOfBaseType;) -> AnyOfBaseType
- **echo_anyof_mapped_pets_post**
    - *invocation:* POST /echo_anyof_mapped_pets
    - *signature:* echo_anyof_mapped_pets_post(req::HTTP.Request, any_of_mapped_pets::AnyOfMappedPets;) -> AnyOfMappedPets
- **echo_anyof_pets_post**
    - *invocation:* POST /echo_anyof_pets
    - *signature:* echo_anyof_pets_post(req::HTTP.Request, any_of_pets::AnyOfPets;) -> AnyOfPets
- **echo_arrays_post**
    - *invocation:* POST /echo_arrays
    - *signature:* echo_arrays_post(req::HTTP.Request, type_with_all_array_types::TypeWithAllArrayTypes;) -> TypeWithAllArrayTypes
- **echo_oneof_base_type_post**
    - *invocation:* POST /echo_oneof_base_type
    - *signature:* echo_oneof_base_type_post(req::HTTP.Request, one_of_base_type::OneOfBaseType;) -> OneOfBaseType
- **echo_oneof_mapped_pets_post**
    - *invocation:* POST /echo_oneof_mapped_pets
    - *signature:* echo_oneof_mapped_pets_post(req::HTTP.Request, one_of_mapped_pets::OneOfMappedPets;) -> OneOfMappedPets
- **echo_oneof_pets_post**
    - *invocation:* POST /echo_oneof_pets
    - *signature:* echo_oneof_pets_post(req::HTTP.Request, one_of_pets::OneOfPets;) -> OneOfPets
"""
module AllAnyServer

using HTTP
using URIs
using Dates
using TimeZones
using OpenAPI
using OpenAPI.Servers

const API_VERSION = "0.0.1"

include("modelincludes.jl")

include("apis/api_DefaultApi.jl")

"""
Register handlers for all APIs in this module in the supplied `Router` instance.

Paramerets:
- `router`: Router to register handlers in
- `impl`: module that implements the server methods

Optional parameters:
- `path_prefix`: prefix to be applied to all paths
- `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:
    - `init`: called before the request is processed
    - `pre_validation`: called after the request is parsed but before validation
    - `pre_invoke`: called after validation but before the handler is invoked
    - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    registerDefaultApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    return router
end

end # module AllAnyServer
