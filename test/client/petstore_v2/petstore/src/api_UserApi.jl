# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UserApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

const _returntypes_create_user = Dict{Regex,Type}(
    Regex("^" * replace("0", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_user(_api::UserApi, body::User; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_user, "/user", [], body)
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create user

This can only be done by the logged in user.

Params:
- body::User (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function create_user(_api::UserApi, body::User; _mediaType=nothing)
    _ctx = _oacinternal_create_user(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_user(_api::UserApi, response_stream::Channel, body::User; _mediaType=nothing)
    _ctx = _oacinternal_create_user(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_users_with_array_input = Dict{Regex,Type}(
    Regex("^" * replace("0", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_users_with_array_input(_api::UserApi, body::Vector{User}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_users_with_array_input, "/user/createWithArray", [], body)
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates list of users with given input array

Params:
- body::Vector{User} (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function create_users_with_array_input(_api::UserApi, body::Vector{User}; _mediaType=nothing)
    _ctx = _oacinternal_create_users_with_array_input(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_users_with_array_input(_api::UserApi, response_stream::Channel, body::Vector{User}; _mediaType=nothing)
    _ctx = _oacinternal_create_users_with_array_input(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_users_with_list_input = Dict{Regex,Type}(
    Regex("^" * replace("0", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_users_with_list_input(_api::UserApi, body::Vector{User}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_users_with_list_input, "/user/createWithList", [], body)
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates list of users with given input array

Params:
- body::Vector{User} (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function create_users_with_list_input(_api::UserApi, body::Vector{User}; _mediaType=nothing)
    _ctx = _oacinternal_create_users_with_list_input(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_users_with_list_input(_api::UserApi, response_stream::Channel, body::Vector{User}; _mediaType=nothing)
    _ctx = _oacinternal_create_users_with_list_input(_api, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_user = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_user(_api::UserApi, username::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_user, "/user/{username}", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete user

This can only be done by the logged in user.

Params:
- username::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_user(_api::UserApi, username::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_user(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_user(_api::UserApi, response_stream::Channel, username::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_user(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_by_name = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => User,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_by_name(_api::UserApi, username::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_by_name, "/user/{username}", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/xml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get user by user name

Params:
- username::String (required)

Return: User, OpenAPI.Clients.ApiResponse
"""
function get_user_by_name(_api::UserApi, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_by_name(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_by_name(_api::UserApi, response_stream::Channel, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_by_name(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_login_user = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_login_user(_api::UserApi, username::String, password::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_login_user, "/user/login", [])
    OpenAPI.Clients.set_param(_ctx.query, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "password", password)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/xml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Logs user into the system

Params:
- username::String (required)
- password::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function login_user(_api::UserApi, username::String, password::String; _mediaType=nothing)
    _ctx = _oacinternal_login_user(_api, username, password; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function login_user(_api::UserApi, response_stream::Channel, username::String, password::String; _mediaType=nothing)
    _ctx = _oacinternal_login_user(_api, username, password; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_logout_user = Dict{Regex,Type}(
    Regex("^" * replace("0", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_logout_user(_api::UserApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_logout_user, "/user/logout", [])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Logs out current logged in user session

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function logout_user(_api::UserApi; _mediaType=nothing)
    _ctx = _oacinternal_logout_user(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function logout_user(_api::UserApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_logout_user(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_user = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_user(_api::UserApi, username::String, body::User; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_user, "/user/{username}", [], body)
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updated user

This can only be done by the logged in user.

Params:
- username::String (required)
- body::User (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function update_user(_api::UserApi, username::String, body::User; _mediaType=nothing)
    _ctx = _oacinternal_update_user(_api, username, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_user(_api::UserApi, response_stream::Channel, username::String, body::User; _mediaType=nothing)
    _ctx = _oacinternal_update_user(_api, username, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_user
export create_users_with_array_input
export create_users_with_list_input
export delete_user
export get_user_by_name
export login_user
export logout_user
export update_user
